using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Configuration;
using Box.V2.Config;
using Box.V2.JWTAuth;
using Box.V2;
using Box.V2.Models;

namespace ReleaseAutomation
{
    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                GetParametersFromArgs(args, out var releaseVersion, out var qaEnvironment);
                GetFilesFromRoundHouseServer(releaseVersion, qaEnvironment, out var fileNames, out var lastBuild);
                PrepareRoundHouseScripts(releaseVersion, qaEnvironment, lastBuild);
                CreateReleaseNotes(releaseVersion, lastBuild);
                UploadFilesToBox(releaseVersion, lastBuild, out var sharedLinkUrl);
                CallGraphApi(releaseVersion, lastBuild, sharedLinkUrl);
                
                Console.Out.WriteLine("Processing Complete.");
            }
            catch (Exception e)
            {
                Console.Out.WriteLine(e.Message);                
            }
            finally
            {
                Console.Out.WriteLine("Press any key to exit");
                Console.In.ReadLine();
            }
        }

        public static void GetParametersFromArgs(string[] args, out string releaseVersion, out string qaEnvironment)
        {
            if (args == null || !args.Any())
            {
                throw new Exception("Please pass the release Version and QA Environment arguments");
            }

            releaseVersion = args[0];
            qaEnvironment = args[1];            
        }


        #region RoundHouse

        public static void GetFilesFromRoundHouseServer(string releaseVersion, string qaEnvironment, out IEnumerable<string> fileNames, out int lastBuild)
        {
            Console.Out.WriteLine("Getting files from RoundHouse Server");
            var qaPath = ConfigurationManager.AppSettings.Get("RoundHousePath") + qaEnvironment;

            fileNames = Directory.GetFiles(qaPath).Where(fileName => fileName.Contains(releaseVersion));

            if (!fileNames.Any())
            {
                throw new Exception($"No files found for the release {releaseVersion}");
            }

            lastBuild = fileNames.Select(fileName => GetBuildVersion(fileName, releaseVersion)).Max();
        }

        public static void PrepareRoundHouseScripts(string releaseVersion, string qaEnvironment, int lastBuild)
        {
            Console.Out.WriteLine("Preparing RoundHouse Scripts");
            var qaPath = ConfigurationManager.AppSettings.Get("RoundHousePath") + qaEnvironment;
            Directory.CreateDirectory($"{ConfigurationManager.AppSettings.Get("OutputFinalScriptPath")}{releaseVersion}");

            var fileNames = Directory.GetFiles(qaPath).Where(fileName => fileName.Contains(releaseVersion));

            var finalScriptPath = $"{ConfigurationManager.AppSettings.Get("OutputFinalScriptPath")}{releaseVersion}/GetScripts_Version_{releaseVersion}.{lastBuild}.sql";

            //If there is a previous version of the file, delete it.
            if (File.Exists(finalScriptPath))
            {
                File.Delete(finalScriptPath);
            }

            //Append the content from each file from each build generated by RoundHouse to a Consolidated .sql file
            foreach (var fileName in fileNames)
            {
                Console.Out.WriteLine($"Processing file: {fileName}");
                string content = File.ReadAllText(fileName);
                File.AppendAllText(finalScriptPath, content);//The file will be created in the first iteration
                var oldPath = qaPath + "/old/" + fileName.Substring(fileName.IndexOf(releaseVersion));
                File.Move(fileName, oldPath);//moving the processed file to the old folder
            }

            Console.Out.WriteLine($"Script File Created: {finalScriptPath}");
        }

        public static int GetBuildVersion(string fileName, string releaseVersion)
        {
            var buildString = fileName.Substring(fileName.IndexOf(releaseVersion) + releaseVersion.Length + 1); // *.(buildVersion).sql
            Int32.TryParse(buildString.Substring(0, buildString.Length - 4), out var buildVersion);
            return buildVersion;                         
        }

        #endregion

        #region Jira

        public static void CreateReleaseNotes(string releaseVersion, int lastBuild)
        {
            Console.Out.WriteLine("Creating Release Notes");
            var result = CallJiraApi(releaseVersion);
            CreateReleaseNotesFile(result, releaseVersion, lastBuild);
            Console.Out.WriteLine($"Release Notes File Created: {ConfigurationManager.AppSettings.Get("OutputFinalScriptPath")}{releaseVersion}/Release_Notes_{releaseVersion}.{lastBuild}.txt");
        }

        public static string CallJiraApi(string releaseVersion)
        {
            var url = $"{ ConfigurationManager.AppSettings.Get("JiraApiSearchUrl") }?jql=project=CLARK AND fixVersion=" +
                $"{ releaseVersion }&maxResults={ConfigurationManager.AppSettings.Get("MaxJiraTicketCount")}&fields=summary,issuetype";

            var webrequest = (HttpWebRequest)WebRequest.Create(url);
            webrequest.Method = "GET";
            webrequest.ContentType = "application/json";

            var encodedAuthorizationString = Base64Encode($"{ConfigurationManager.AppSettings.Get("JiraUsername")}:{ConfigurationManager.AppSettings.Get("JiraPassword")}");//Jira Basic Authentication

            webrequest.Headers.Add("Authorization", $"Basic {encodedAuthorizationString}");
            var webresponse = (HttpWebResponse)webrequest.GetResponse();
            var enc = Encoding.GetEncoding("utf-8");
            var responseStream = new StreamReader(webresponse.GetResponseStream(), enc);
            var result = responseStream.ReadToEnd();
            webresponse.Close();
            return result;
        }

        public class Issue
        {
            public Issue(string Key, string Summary, string Type)
            {
                this.Key = Key;
                this.Summary = Summary;
                this.Type = Type;
            }
            public string Key { get; set; }
            public string Summary { get; set; }
            public string Type { get; set; }
        }

        public static void CreateReleaseNotesFile(string jiraResponse, string releaseVersion, int lastBuild)
        {
            dynamic responseJson = JsonConvert.DeserializeObject(jiraResponse);
            var issues = new List<Issue>();
            foreach (var issueJson in responseJson.issues)
            {
                var issue = new Issue(issueJson.key.Value, issueJson.fields.summary.Value, issueJson.fields.issuetype.name.Value);
                issues.Add(issue);
            }

            var tasks = issues.Where(issue => issue.Type == "Task");
            var bugs = issues.Where(issue => issue.Type == "Bug");
            var stories = issues.Where(issue => issue.Type == "Story");

            using (StreamWriter file = new StreamWriter($"{ConfigurationManager.AppSettings.Get("OutputFinalScriptPath")}{releaseVersion}/Release_Notes_{releaseVersion}.{lastBuild}.txt"))
            {
                file.WriteLine($"Release notes - CLARK_Profit - Version {releaseVersion}");

                file.WriteLine("Task");
                foreach (var task in tasks)
                {
                    file.WriteLine($"[{task.Key}] - {task.Summary} ");
                }

                file.WriteLine("Bug");
                foreach (var bug in bugs)
                {
                    file.WriteLine($"[{bug.Key}] - {bug.Summary} ");
                }

                file.WriteLine("Story");
                foreach (var story in stories)
                {
                    file.WriteLine($"[{story.Key}] - {story.Summary} ");
                }
            }
        }

        public static string Base64Encode(string plainText)
        {
            var plainTextBytes = Encoding.UTF8.GetBytes(plainText);
            return Convert.ToBase64String(plainTextBytes);
        }

        #endregion

        #region Box
        public static void UploadFilesToBox(string releaseVersion, int lastBuild, out string sharedLinkUrl)
        {
            Console.Out.WriteLine("Uploading Files to the Box Server");
            var fullReleaseVersion = $"{releaseVersion}.{lastBuild}";
            var reader = new StreamReader(ConfigurationManager.AppSettings.Get("BoxConfigPath"));
            var json = reader.ReadToEnd();
            var config = BoxConfig.CreateFromJsonString(json);

            var sdk = new BoxJWTAuth(config);
            var token = sdk.AdminToken();
            BoxClient client = sdk.AdminClient(token);

            var releaseNumbers = releaseVersion.Split('.');
            var firstNumber = releaseNumbers[0];
            var secondNumber = releaseNumbers[1];

            var result = client.SearchManager.QueryAsync(query: $"Releases_{firstNumber}.{secondNumber}", type: "Folder").Result;

            string parentFolderId;
            if (result.TotalCount > 0)
            {
                parentFolderId = result.Entries.First().Id;
            }
            else //create parent release folder in the root folder
            {
                var folderRequest = new BoxFolderRequest
                {
                    Name = $"Releases_{firstNumber}.{secondNumber}",
                    Parent = new BoxRequestEntity()
                    {
                        Id = "0"//root folder id
                    }
                };
                var createdFolder = client.FoldersManager.CreateAsync(folderRequest).Result;
                parentFolderId = createdFolder.Id;
            }

            string releaseFolderId;
            result = client.SearchManager.QueryAsync(query: releaseVersion, type: "Folder").Result;
            if (result.TotalCount > 0 && result.Entries.First().Parent.Id == parentFolderId)
            {
                releaseFolderId = result.Entries.First().Id; //Release Folder already exists in Box
            }
            else
            {
                var folderRequest = new BoxFolderRequest
                {
                    Name = releaseVersion,
                    Parent = new BoxRequestEntity()
                    {
                        Id = parentFolderId
                    }
                };
                var createdFolder = client.FoldersManager.CreateAsync(folderRequest).Result;
                releaseFolderId = createdFolder.Id;
            }

            UploadFileToBox(client, $"GetScripts_Version_{fullReleaseVersion}.sql", $"{ConfigurationManager.AppSettings.Get("OutputFinalScriptPath")}{releaseVersion}/GetScripts_Version_{fullReleaseVersion}.sql", releaseFolderId);
            UploadFileToBox(client, $"Release_Notes_{fullReleaseVersion}.sql", $"{ConfigurationManager.AppSettings.Get("OutputFinalScriptPath")}{releaseVersion}/Release_Notes_{fullReleaseVersion}.txt", releaseFolderId);

            var sharedLinkParams = new BoxSharedLinkRequest()
            {
                Access = BoxSharedLinkAccessType.open
            };
            BoxFolder sharedFolder = client.FoldersManager.CreateSharedLinkAsync(parentFolderId, sharedLinkParams).Result;
            sharedLinkUrl = sharedFolder.SharedLink.Url;

            Console.Out.WriteLine($"Files Uploaded to the Box Server: {sharedLinkUrl}");
        }

        public static void UploadFileToBox(BoxClient client, string fileName, string path, string parentFolderId)
        {
            var fileRequest = new BoxFileRequest()
            {
                Name = fileName,
                Parent = new BoxRequestEntity() { Id = parentFolderId }
            };
            StreamReader fileReader = new StreamReader(path);
            var file = client.FilesManager.UploadAsync(fileRequest, fileReader.BaseStream).Result;
        }

        #endregion

        #region Azure
        public static void CallGraphApi(string releaseVersion, int lastBuild, string sharedLinkUrl)
        {
            Console.Out.WriteLine($"Creating Draft Mail");
            var fullReleaseVersion = $"{releaseVersion}.{lastBuild}";
            var graphMessageUrl = ConfigurationManager.AppSettings.Get("GraphMessageUrl");
            var outputFinalScriptPath = ConfigurationManager.AppSettings.Get("OutputFinalScriptPath");
            string mailId;

            try
            {
                mailId = CreateDraftMail(graphMessageUrl, fullReleaseVersion, sharedLinkUrl);
            }
            catch (WebException)
            {
                //If the token expires and the request throws a WebException, refresh the token and update the app config value, then try to create the draft mail again.
                RefreshGraphApiToken(ConfigurationManager.AppSettings.Get("GraphRefreshTokenUrl"));
                mailId = CreateDraftMail(graphMessageUrl, fullReleaseVersion, sharedLinkUrl);
            }

            AddAttachmentToDraftMail($"{graphMessageUrl}/{mailId}/attachments/", 
                $"GetScripts_Version_{fullReleaseVersion}.sql", 
                $"{outputFinalScriptPath}{releaseVersion}/GetScripts_Version_{fullReleaseVersion}.sql");
            AddAttachmentToDraftMail($"{graphMessageUrl}/{mailId}/attachments/", 
                $"Release_Notes_{fullReleaseVersion}.txt", 
                $"{outputFinalScriptPath}{releaseVersion}/Release_Notes_{fullReleaseVersion}.txt");

            Console.Out.WriteLine($"Draft Mail Created");
        }        

        public static void RefreshGraphApiToken(string url)
        {
            var webrequest = (HttpWebRequest)WebRequest.Create(url);
            webrequest.Method = "POST";
            webrequest.ContentType = "application/x-www-form-urlencoded";

            var postData = "grant_type=" + Uri.EscapeDataString("refresh_token");
            postData += "&client_id=" + Uri.EscapeDataString(ConfigurationManager.AppSettings.Get("AzureAppClientId"));
            postData += "&scope=" + Uri.EscapeDataString(ConfigurationManager.AppSettings.Get("GraphScope"));
            postData += "&client_secret=" + Uri.EscapeDataString(ConfigurationManager.AppSettings.Get("AzureAppClientSecret"));
            postData += "&refresh_token=" + Uri.EscapeDataString(ConfigurationManager.AppSettings.Get("GraphOauthRefreshToken"));
            postData += "&redirect_uri=" + Uri.EscapeDataString(ConfigurationManager.AppSettings.Get("ActiveDirectoryRedirectUri"));
            var data = Encoding.UTF8.GetBytes(postData);

            webrequest.ContentLength = data.Length;

            using (var streamWriter = webrequest.GetRequestStream())
            {
                streamWriter.Write(data, 0, data.Length);
            }

            var webresponse = (HttpWebResponse)webrequest.GetResponse();
            var enc = Encoding.GetEncoding("utf-8");
            var responseStream = new StreamReader(webresponse.GetResponseStream(), enc);
            var result = responseStream.ReadToEnd();

            dynamic jsonResult = JsonConvert.DeserializeObject(result);

            webresponse.Close();

            var config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);
            config.AppSettings.Settings["GraphOauthToken"].Value = jsonResult.access_token;
            config.Save(ConfigurationSaveMode.Modified);
            ConfigurationManager.RefreshSection("appSettings");
        }

        public static string CreateDraftMail(string url, string lastBuild, string sharedLinkUrl)
        {
            var webrequest = (HttpWebRequest)WebRequest.Create(url);
            webrequest.Method = "POST";
            webrequest.ContentType = "application/json";            

            webrequest.Headers.Add("Authorization", $"Bearer {ConfigurationManager.AppSettings.Get("GraphOauthToken")}");

            using (var streamWriter = webrequest.GetRequestStream())
            {
                var mailContent = 
                    $@"<font color='#1F4E79'><i>To all,<br><br>
                    See the attached files to find the information related to the cumulative Release {lastBuild}<br><br>
                    - Release_Notes_{lastBuild}<br><br>
                    - GetScripts_Version_{lastBuild}<br><br>
                    You can locate the last DB changes also in the following URL:</i><br><br><br>
                    {sharedLinkUrl} <br><br>
                    <i>Steve, in order to install the Release {lastBuild}<br><br>
                    First apply the DB changes, second log in to the Octopus system with your credential:</i><br><br>
                    https://octopus.tss.com.pe:13001<br><br>
                    <i>Then click on the Deploy button on UAT(your <b>PREPROD</b> environment) later click on the Deploy button on <b>Production</b>(your <b>PROD</b> environment).<br><br><br>
                    Regards<br>
                    Alexis Leon.</i></font>";

                var mailObject = new
                {
                    subject = $"Release {lastBuild}",
                    body = new { contentType = "HTML", content = mailContent },
                    toRecipients = new[]{
                        new {emailAddress = new { address = "Steve.Stasuk@ClarkDietrich.com" } } ,
                        new {emailAddress = new { address = "Chris.Fiste@ClarkDietrich.com" } } ,
                        new {emailAddress = new { address = "Mike.Garrett@ClarkDietrich.com" } } ,
                        new {emailAddress = new { address = "SoporteClark@tss.com.pe" } } ,
                        new {emailAddress = new { address = "Jason.Armstrong@ClarkDietrich.com" } } ,
                        new {emailAddress = new { address = "Cappe.Lindsey@ClarkDietrich.com" } } ,
                        new {emailAddress = new { address = "Fred.Bennett@ClarkDietrich.com" } } ,
                        new {emailAddress = new { address = "ITStaff@ClarkDietrich.com" } } ,
                        new {emailAddress = new { address = "Reymundo.Rangel@ClarkDietrich.com" } } ,
                        new {emailAddress = new { address = "esarmiento@baufest.com" } } ,
                        new {emailAddress = new { address = "rcruz@baufest.com" } }
                    }
                };
                var jsonString = JsonConvert.SerializeObject(mailObject);
                var postData = Encoding.UTF8.GetBytes(jsonString);
                streamWriter.Write(postData, 0, postData.Length);
            }

            var webresponse = (HttpWebResponse)webrequest.GetResponse();
            var enc = Encoding.GetEncoding("utf-8");
            var responseStream = new StreamReader(webresponse.GetResponseStream(), enc);
            var result = responseStream.ReadToEnd();

            dynamic jsonResult = JsonConvert.DeserializeObject(result);

            webresponse.Close();
            return jsonResult.id;
        }

        public static void AddAttachmentToDraftMail(string url, string fileName, string filePath)
        {
            var webrequest = (HttpWebRequest)WebRequest.Create(url);
            webrequest.Method = "POST";
            webrequest.ContentType = "application/json";

            webrequest.Headers.Add("Authorization", $"Bearer {ConfigurationManager.AppSettings.Get("GraphOauthToken")}");

            var bytes = File.ReadAllBytes(filePath);
            var fileContent = Convert.ToBase64String(bytes);

            using (var streamWriter = webrequest.GetRequestStream())
            {
                string jsonString = "{\"@odata.type\": \"#microsoft.graph.fileAttachment\",\"name\":  \"" + fileName + "\",\"contentBytes\": \"" + fileContent + "\"}";
                var postData = Encoding.UTF8.GetBytes(jsonString);
                streamWriter.Write(postData, 0, postData.Length);
            }

            var webresponse = (HttpWebResponse)webrequest.GetResponse();
            var enc = Encoding.GetEncoding("utf-8");
            var responseStream = new StreamReader(webresponse.GetResponseStream(), enc);
            var result = responseStream.ReadToEnd();

            webresponse.Close();
        }   
        
        #endregion
    }
}
